import numpy as np


big_matrix = np.array([  [-1.1443, -2.2887, -1.1443, -1.1443,0,  0.19943],
                [1.9820, 0,  0.06607, -1.9820, -1.3214, 0.6607 ],
                [0,0,0.5118,0, 0.5118, 0.5118 ]]) * (10**3)

#big_matrix = [2*x for x in big_matrix]
#print(big_matrix[0][0])

"""
De f√∏rste testene
"""
#times = [0.00176, 0.162912, -32.*(10**(-5)), 0.001792, 0.001792, 0.0]      ::: Rett over 
#times = [0.003968, 0.004224, 0.0, 0.000352, -3.2*10**(-5), 0.073728]       ::: 45 grader theta og 30 grader phi
#times = [0.008064, 0.80704, -3.2*10**(-5), -0.000256, 0.000128, 0.000352]  ::: 45 grader theta, -110 grader phi

"""
#Test 1: 
delays = [-0.015136, 0.0, -3.2e-05, 0.015104, -0.07488, 0.0]
delays = [-0.002688, -0.000672, -0.000512, 0.00384, 0.00384, 9.6e-05]
delays = [-0.644896, -0.000672, -0.000416, 0.004608, 0.0, 0.000128]
delays = [-0.030112, -3.2e-05, -3.2e-05, 9.6e-05, 9.6e-05, 0.0]
delays = [0.286432, -0.00064, -0.000544, -0.000544, 0.0, 0.0]
"""

#"""
# Test 4:
delays = [0.176096, 0.0, -0.0008, -0.101888, 0.0, -0.000896]
delays = [0.07856, 9.6e-05, -0.0008, -0.076064, 0.0, -0.000928]
#delays = [-0.000128, 0.0, -0.0008, -0.156032, 0.0, -0.000896]
#delays = [-0.000128, 0.0, -3.2e-05, 9.6e-05, 9.6e-05, -3.2e-05]
#"""

#delays = [0.176096, 0.0, -0.0008, -0.101888, 0.0, -0.000896]
# delays = [-0.010272, -0.000128, -0.000416, 0.005472, 0.0, -0.000288]


def calculate_r_vec(t):
    return np.matmul(big_matrix, t)


z_axis = np.transpose([0,0,1])
length_z = 1

def theta(r):
  length_r = np.sqrt(np.dot(r, r))
  return np.rad2deg(np.arccos((r[2]) / ((length_r * length_z))))


# def theta(r):
#     return np.rad2deg(np.arccos(r[2]/np.linalg.norm(r)))

def phi(r):
   return np.rad2deg(np.arctan( r[0] / r[1] ))

def main():
    r = calculate_r_vec(delays)
    #print("R-vec: ", r)
    print("Theta: ", theta(r))
    print("Phi: ", phi(r))


main()



### Data: 
"""
Test 1 (150_0): 
[-0.015136, 0.0, -3.2e-05, 0.015104, -0.07488, 0.0]
[-0.002688, -0.000672, -0.000512, 0.00384, 0.00384, 9.6e-05]
[-0.644896, -0.000672, -0.000416, 0.004608, 0.0, 0.000128]
[-0.030112, -3.2e-05, -3.2e-05, 9.6e-05, 9.6e-05, 0.0]
[0.286432, -0.00064, -0.000544, -0.000544, 0.0, 0.0]


Test 2 (90_45) : 
[-0.003328, 0.000128, -0.000672, 0.083584, 0.0, -0.000896]
[0.074464, 0.000128, -0.00064, -0.073888, 0.0, -0.000896]
[-0.015136, 0.0, -3.2e-05, 0.015104, 0.015104, -3.2e-05]

Test 3 (neg90_45): 
[-0.086816, -3.2e-05, -0.000288, 0.086784, 0.0, -0.000256]
[-0.00016, -3.2e-05, -3.2e-05, 0.000128, 9.6e-05, -3.2e-05]
[0.065536, -3.2e-05, -0.000384, -0.065664, 0.0, -0.000288]
[-0.010272, -0.000128, -0.000416, 0.005472, 0.0, -0.000288]
[-0.015136, -3.2e-05, -3.2e-05, 0.015104, 0.015104, -3.2e-05]

Long
[-0.008064, -3.2e-05, -3.2e-05, 0.005248, 0.0, -3.2e-05]
[-0.015136, 0.0, -3.2e-05, 0.015104, 9.6e-05, -3.2e-05]

Test 4 (rett_):
[0.176096, 0.0, -0.0008, -0.101888, 0.0, -0.000896]
[0.07856, 9.6e-05, -0.0008, -0.076064, 0.0, -0.000928]
[-0.000128, 0.0, -0.0008, -0.156032, 0.0, -0.000896]
[-0.000128, 0.0, -3.2e-05, 9.6e-05, 9.6e-05, -3.2e-05]

"""
